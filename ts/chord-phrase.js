"use strict";
(() => {
  // ns-hugo:/home/runner/work/handex/handex/assets/ts/terminal/TerminalTypes.ts
  var TerminalCssClasses = {
    Terminal: "terminal",
    Line: "terminal-line",
    Output: "terminal-output",
    Input: "terminal-input",
    Prompt: "prompt",
    Head: "head",
    Tail: "tail",
    LogPrefix: "log-prefix",
    LogTime: "log-time",
    NextChars: "nextChars",
    NextCharsRate: "nextCharsRate",
    WholePhraseChords: "wholePhraseChords",
    ChordImageHolder: "chord-image-holder",
    TestArea: "testArea",
    SvgCharacter: "svgCharacter",
    TestMode: "testMode",
    chordified: "chordified",
    pangrams: "pangrams",
    chordSection: "chord-section",
    voiceMode: "voiceMode",
    videoSection: "video-section",
    allChordsList: "allChordsList",
    errorCount: "errorCount",
    Phrase: "phrase",
    Timer: "timer",
    TimerSvg: "timerSvg",
    CharTimes: "charTimes",
    WPM: "wpm"
  };

  // ns-hugo:/home/runner/work/handex/handex/assets/ts/HandChord.ts
  var HandChord = class {
    constructor() {
      this.saveMode = (modeEvent) => {
        const result = modeEvent.target.checked;
        localStorage.setItem(modeEvent.target.id, result.toString());
        return result;
      };
      var _a;
      this.phrase = document.getElementById("phrase");
      this.chordified = document.getElementById("chordified");
      this.wholePhraseChords = document.getElementById(TerminalCssClasses.WholePhraseChords);
      this.charTimer = [];
      this.charTimes = document.getElementById("charTimes");
      this.wpm = document.getElementById("wpm");
      const handleInputEvent = (event) => {
        console.error("Handle Input Event not implementd:", event);
      };
      this.prevCharTime = 0;
      this.pangrams = document.getElementById("pangrams");
      this.prevCharTime = 0;
      this.preview = document.getElementById("preview");
      this.charTimer = [];
      this.chordSection = document.getElementById("chord-section");
      this.voiceMode = document.getElementById("voiceMode");
      this.voiceMode.checked = localStorage.getItem("voiceMode") == "true";
      (_a = this.voiceMode) == null ? void 0 : _a.addEventListener("change", (e) => {
        this.saveMode(e);
      });
      this.videoMode = document.getElementById("videoMode");
      this.videoSection = document.getElementById("video-section");
      if (this.videoSection) {
        this.videoSection.hidden = !this.videoMode.checked;
      }
      this.allChordsList = document.getElementById("allChordsList");
      this.errorCount = document.getElementById("errorCount");
    }
  };

  // <stdin>
  document.addEventListener("DOMContentLoaded", () => {
    const handChord = new HandChord();
  });
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibnMtaHVnbzovaG9tZS9ydW5uZXIvd29yay9oYW5kZXgvaGFuZGV4L2Fzc2V0cy90cy90ZXJtaW5hbC9UZXJtaW5hbFR5cGVzLnRzIiwgIm5zLWh1Z286L2hvbWUvcnVubmVyL3dvcmsvaGFuZGV4L2hhbmRleC9hc3NldHMvdHMvSGFuZENob3JkLnRzIiwgIjxzdGRpbj4iXSwKICAic291cmNlc0NvbnRlbnQiOiBbIlxuZXhwb3J0IGNvbnN0IFRlcm1pbmFsQ3NzQ2xhc3NlcyA9IHtcbiAgICBUZXJtaW5hbDogJ3Rlcm1pbmFsJyxcbiAgICBMaW5lOiAndGVybWluYWwtbGluZScsXG4gICAgT3V0cHV0OiAndGVybWluYWwtb3V0cHV0JyxcbiAgICBJbnB1dDogJ3Rlcm1pbmFsLWlucHV0JyxcbiAgICBQcm9tcHQ6ICdwcm9tcHQnLFxuICAgIEhlYWQ6ICdoZWFkJyxcbiAgICBUYWlsOiAndGFpbCcsXG4gICAgTG9nUHJlZml4OiAnbG9nLXByZWZpeCcsXG4gICAgTG9nVGltZTogJ2xvZy10aW1lJyxcbiAgICBOZXh0Q2hhcnM6ICduZXh0Q2hhcnMnLFxuICAgIE5leHRDaGFyc1JhdGU6ICduZXh0Q2hhcnNSYXRlJyxcbiAgICBXaG9sZVBocmFzZUNob3JkczogJ3dob2xlUGhyYXNlQ2hvcmRzJyxcbiAgICBDaG9yZEltYWdlSG9sZGVyOiAnY2hvcmQtaW1hZ2UtaG9sZGVyJyxcbiAgICBUZXN0QXJlYTogJ3Rlc3RBcmVhJyxcbiAgICBTdmdDaGFyYWN0ZXI6ICdzdmdDaGFyYWN0ZXInLFxuICAgIFRlc3RNb2RlOiAndGVzdE1vZGUnLFxuICAgIGNob3JkaWZpZWQ6ICdjaG9yZGlmaWVkJyxcbiAgICBwYW5ncmFtczogJ3BhbmdyYW1zJyxcbiAgICBjaG9yZFNlY3Rpb246ICdjaG9yZC1zZWN0aW9uJyxcbiAgICB2b2ljZU1vZGU6ICd2b2ljZU1vZGUnLFxuICAgIHZpZGVvU2VjdGlvbjogJ3ZpZGVvLXNlY3Rpb24nLFxuICAgIGFsbENob3Jkc0xpc3Q6ICdhbGxDaG9yZHNMaXN0JyxcbiAgICBlcnJvckNvdW50OiAnZXJyb3JDb3VudCcsXG4gICAgUGhyYXNlOiAncGhyYXNlJyxcbiAgICBUaW1lcjogJ3RpbWVyJyxcbiAgICBUaW1lclN2ZzogJ3RpbWVyU3ZnJyxcbiAgICBDaGFyVGltZXM6ICdjaGFyVGltZXMnLFxuICAgIFdQTTogJ3dwbScsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgTG9nS2V5cyA9IHtcbiAgICBDaGFyVGltZTogJ2NoYXItdGltZScsXG4gICAgQ29tbWFuZDogJ2NvbW1hbmQnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgVGltZUNvZGUgPSBzdHJpbmc7XG5leHBvcnQgdHlwZSBUaW1lSFRNTCA9IHN0cmluZztcbmV4cG9ydCB0eXBlIENoYXJEdXJhdGlvbiA9IHtcbiAgICBjaGFyYWN0ZXI6IHN0cmluZztcbiAgICBkdXJhdGlvbk1pbGxpc2Vjb25kczogbnVtYmVyO1xufVxuZXhwb3J0IHR5cGUgQ2hhcldQTSA9IHtcbiAgICBjaGFyYWN0ZXI6IHN0cmluZztcbiAgICB3cG06IG51bWJlcjtcbn0iLCAiaW1wb3J0IHsgTmV4dENoYXJzRGlzcGxheSB9IGZyb20gXCIuL05leHRDaGFyc0Rpc3BsYXkuanNcIjtcbmltcG9ydCB7IFRlcm1pbmFsQ3NzQ2xhc3NlcyB9IGZyb20gXCIuL3Rlcm1pbmFsL1Rlcm1pbmFsVHlwZXMuanNcIjtcbmltcG9ydCB7IENoYXJUaW1lLCBzcGFjZURpc3BsYXlDaGFyLCBDYW5jZWxDYWxsYmFjaywgSW5wdXRFdmVudENhbGxiYWNrLCBjcmVhdGVDaGFyVGltZSB9IGZyb20gXCIuL3R5cGVzL1R5cGVzLmpzXCI7XG5cblxuZXhwb3J0IGNsYXNzIEhhbmRDaG9yZCB7XG4gICAgcGhyYXNlOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbDtcbiAgICBjaG9yZGlmaWVkOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgd2hvbGVQaHJhc2VDaG9yZHM6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBjaGFyVGltZXI6IENoYXJUaW1lW107XG4gICAgY2hhclRpbWVzOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgd3BtOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgcHJldkNoYXJUaW1lOiBudW1iZXI7XG4gICAgcHJldmlldzogSFRNTFZpZGVvRWxlbWVudCB8IG51bGw7XG4gICAgcGFuZ3JhbXM6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICB2b2ljZU1vZGU6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsO1xuICAgIHZpZGVvTW9kZTogSFRNTElucHV0RWxlbWVudCB8IG51bGw7XG4gICAgdmlkZW9TZWN0aW9uOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG4gICAgZXJyb3JDb3VudDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIGFsbENob3Jkc0xpc3Q6IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcbiAgICBjaG9yZFNlY3Rpb246IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBocmFzZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGhyYXNlXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuY2hvcmRpZmllZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hvcmRpZmllZFwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgdGhpcy53aG9sZVBocmFzZUNob3JkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFRlcm1pbmFsQ3NzQ2xhc3Nlcy5XaG9sZVBocmFzZUNob3JkcykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuY2hhclRpbWVyID0gW107XG4gICAgICAgIHRoaXMuY2hhclRpbWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFyVGltZXNcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIHRoaXMud3BtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3cG1cIikgYXMgSFRNTEVsZW1lbnQ7XG5cblxuICAgICAgICBjb25zdCBoYW5kbGVJbnB1dEV2ZW50OiBJbnB1dEV2ZW50Q2FsbGJhY2sgPSAoZXZlbnQ6IElucHV0RXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJIYW5kbGUgSW5wdXQgRXZlbnQgbm90IGltcGxlbWVudGQ6XCIsIGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcmV2Q2hhclRpbWUgPSAwO1xuICAgICAgICB0aGlzLnBhbmdyYW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYW5ncmFtc1wiKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgdGhpcy5wcmV2Q2hhclRpbWUgPSAwO1xuICAgICAgICB0aGlzLnByZXZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByZXZpZXdcIikgYXMgSFRNTFZpZGVvRWxlbWVudDtcbiAgICAgICAgdGhpcy5jaGFyVGltZXIgPSBbXTtcbiAgICAgICAgdGhpcy5jaG9yZFNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNob3JkLXNlY3Rpb25cIikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIHRoaXMudm9pY2VNb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2b2ljZU1vZGVcIikgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgdGhpcy52b2ljZU1vZGUuY2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd2b2ljZU1vZGUnKSA9PSAndHJ1ZSc7XG4gICAgICAgIHRoaXMudm9pY2VNb2RlPy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2F2ZU1vZGUoZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZpZGVvTW9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW9Nb2RlXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIC8vIE5PVEU6IFN0YXJ0aW5nIHZpZGVvIG9uIHBhZ2UgbG9hZCBpcyBub24tb3B0aW1hbC5cbiAgICAgICAgLy8gQVBQLnZpZGVvTW9kZS5jaGVja2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3ZpZGVvTW9kZScpID09ICd0cnVlJztcbiAgICAgICAgdGhpcy52aWRlb1NlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvLXNlY3Rpb25cIikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLnZpZGVvU2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy52aWRlb1NlY3Rpb24uaGlkZGVuID0gIXRoaXMudmlkZW9Nb2RlLmNoZWNrZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFsbENob3Jkc0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsbENob3Jkc0xpc3RcIikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIC8vIEFQUC50ZXN0TW9kZUxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0TW9kZUxhYmVsXCIpO1xuICAgICAgICB0aGlzLmVycm9yQ291bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yQ291bnRcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzYXZlTW9kZSA9IChtb2RlRXZlbnQ6IEV2ZW50KTogYm9vbGVhbiA9PiB7XG4gICAgICAgIC8vIGNob3JkaWZ5KCk7XG4gICAgICAgIC8vIEhpZGUgdGhlIGNob3JkaWZpZWQgc3ViLWRpdnMuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IChtb2RlRXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWRcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oKG1vZGVFdmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuaWQsIHJlc3VsdC50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbn07XG5cbiIsICJpbXBvcnQgeyBIYW5kQ2hvcmQgfSBmcm9tIFwiLi9IYW5kQ2hvcmRcIjtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRDaG9yZCA9IG5ldyBIYW5kQ2hvcmQoKTtcbn0pOyJdLAogICJtYXBwaW5ncyI6ICI7OztBQUNPLE1BQU0scUJBQXFCO0FBQUEsSUFDOUIsVUFBVTtBQUFBLElBQ1YsTUFBTTtBQUFBLElBQ04sUUFBUTtBQUFBLElBQ1IsT0FBTztBQUFBLElBQ1AsUUFBUTtBQUFBLElBQ1IsTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLElBQ04sV0FBVztBQUFBLElBQ1gsU0FBUztBQUFBLElBQ1QsV0FBVztBQUFBLElBQ1gsZUFBZTtBQUFBLElBQ2YsbUJBQW1CO0FBQUEsSUFDbkIsa0JBQWtCO0FBQUEsSUFDbEIsVUFBVTtBQUFBLElBQ1YsY0FBYztBQUFBLElBQ2QsVUFBVTtBQUFBLElBQ1YsWUFBWTtBQUFBLElBQ1osVUFBVTtBQUFBLElBQ1YsY0FBYztBQUFBLElBQ2QsV0FBVztBQUFBLElBQ1gsY0FBYztBQUFBLElBQ2QsZUFBZTtBQUFBLElBQ2YsWUFBWTtBQUFBLElBQ1osUUFBUTtBQUFBLElBQ1IsT0FBTztBQUFBLElBQ1AsVUFBVTtBQUFBLElBQ1YsV0FBVztBQUFBLElBQ1gsS0FBSztBQUFBLEVBQ1Q7OztBQ3pCTyxNQUFNLFlBQU4sTUFBZ0I7QUFBQSxJQWlCbkIsY0FBYztBQW9DZCxXQUFRLFdBQVcsQ0FBQyxjQUE4QjtBQUc5QyxjQUFNLFNBQVUsVUFBVSxPQUE0QjtBQUN0RCxxQkFBYSxRQUFTLFVBQVUsT0FBNEIsSUFBSSxPQUFPLFNBQVMsQ0FBQztBQUNqRixlQUFPO0FBQUEsTUFDWDtBQWhFSjtBQXVCUSxXQUFLLFNBQVMsU0FBUyxlQUFlLFFBQVE7QUFDOUMsV0FBSyxhQUFhLFNBQVMsZUFBZSxZQUFZO0FBQ3RELFdBQUssb0JBQW9CLFNBQVMsZUFBZSxtQkFBbUIsaUJBQWlCO0FBQ3JGLFdBQUssWUFBWSxDQUFDO0FBQ2xCLFdBQUssWUFBWSxTQUFTLGVBQWUsV0FBVztBQUNwRCxXQUFLLE1BQU0sU0FBUyxlQUFlLEtBQUs7QUFHeEMsWUFBTSxtQkFBdUMsQ0FBQyxVQUFzQjtBQUNoRSxnQkFBUSxNQUFNLHNDQUFzQyxLQUFLO0FBQUEsTUFDN0Q7QUFDQSxXQUFLLGVBQWU7QUFDcEIsV0FBSyxXQUFXLFNBQVMsZUFBZSxVQUFVO0FBQ2xELFdBQUssZUFBZTtBQUNwQixXQUFLLFVBQVUsU0FBUyxlQUFlLFNBQVM7QUFDaEQsV0FBSyxZQUFZLENBQUM7QUFDbEIsV0FBSyxlQUFlLFNBQVMsZUFBZSxlQUFlO0FBQzNELFdBQUssWUFBWSxTQUFTLGVBQWUsV0FBVztBQUNwRCxXQUFLLFVBQVUsVUFBVSxhQUFhLFFBQVEsV0FBVyxLQUFLO0FBQzlELGlCQUFLLGNBQUwsbUJBQWdCLGlCQUFpQixVQUFVLE9BQUs7QUFDNUMsYUFBSyxTQUFTLENBQUM7QUFBQSxNQUNuQjtBQUNBLFdBQUssWUFBWSxTQUFTLGVBQWUsV0FBVztBQUdwRCxXQUFLLGVBQWUsU0FBUyxlQUFlLGVBQWU7QUFDM0QsVUFBSSxLQUFLLGNBQWM7QUFDbkIsYUFBSyxhQUFhLFNBQVMsQ0FBQyxLQUFLLFVBQVU7QUFBQSxNQUMvQztBQUVBLFdBQUssZ0JBQWdCLFNBQVMsZUFBZSxlQUFlO0FBRTVELFdBQUssYUFBYSxTQUFTLGVBQWUsWUFBWTtBQUFBLElBQzFEO0FBQUEsRUFVSjs7O0FDaEVBLFdBQVMsaUJBQWlCLG9CQUFvQixNQUFNO0FBQ2hELFVBQU0sWUFBWSxJQUFJLFVBQVU7QUFBQSxFQUNwQyxDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
